// Generated by CoffeeScript 1.8.0
var Controller, Conversation, Message, MessagesController, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Controller = require('./base_controller');

Message = require('../models/message');

Conversation = require('../models/conversation');

_ = require('underscore');

MessagesController = (function(_super) {
  __extends(MessagesController, _super);

  function MessagesController() {
    this.index = __bind(this.index, this);
    this.create = __bind(this.create, this);
    return MessagesController.__super__.constructor.apply(this, arguments);
  }

  MessagesController.prototype.create = function(req, res) {
    return Conversation.findOne({
      id: req.query.conversation_id
    }, (function(_this) {
      return function(err, conversation) {
        var message;
        if (err) {
          return res.send(err);
        }
        if (!_.contains(conversation.userIds, req.query.user_id)) {
          return res.json({
            err: "Unauthorized conversation access"
          });
        }
        message = new Message({
          id: _this.getId(),
          body: req.query.body,
          userId: req.query.user_id,
          conversationId: req.query.conversation_id,
          created: Date()
        });
        return message.save(function(err) {
          if (err) {
            return res.send(err);
          } else {
            conversation.updated = message.created;
            conversation.lastMessage = message.body;
            return conversation.save(function(err) {
              if (err) {
                return res.send(err);
              } else {
                return res.json({
                  result: "success",
                  message: message
                });
              }
            });
          }
        });
      };
    })(this));
  };

  MessagesController.prototype.index = function(req, res) {
    if (!req.query.conversation_id) {
      return res.json({
        err: "Must provide a conversation id"
      });
    }
    if (!req.query.user_id) {
      return res.json({
        err: "Must provide a user id"
      });
    }
    return Conversation.findOne({
      id: req.query.conversation_id
    }, (function(_this) {
      return function(err, conversation) {
        var page, skip;
        if (err) {
          return res.send(err);
        }
        if (!_.contains(conversation.userIds, req.query.user_id)) {
          return res.json({
            err: "Unauthorized conversation access"
          });
        }
        if (!req.query.page) {
          req.query.page = 1;
        }
        skip = 0;
        if (req.query.page && !isNaN(req.query.page) && req.query.page >= 1) {
          page = req.query.page - 1;
          skip = _this.PAGE_SIZE * page;
        }
        return Message.find({
          conversationId: conversation.id
        }, null, {
          created: {
            updated: -1
          },
          skip: (req.query.page - 1) * _this.PAGE_SIZE,
          limit: _this.PAGE_SIZE
        }, function(err, messages) {
          if (err) {
            res.send(err);
          }
          return res.json({
            result: "success",
            messages: messages
          });
        });
      };
    })(this));
  };

  return MessagesController;

})(Controller);

module.exports = new MessagesController();
